<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.spring.domain.vacation.mapper.VacationMapper">


   <select id="getAllVacationDetails" resultType="org.spring.domain.vacation.model.VacationDetailsEntity">
     SELECT 
            e.employment_type AS employmentType,
            e.employee_id AS employeeId,
            e.korean_name AS koreanName,
            d.department_name AS departmentName,
            p.position_name AS positionName,
            vt.vacation_type_name AS vacationTypeName,
            vd.vacation_value AS totalVacationDays,
            (SELECT NVL(SUM(vd2.vacation_value), 0)
             FROM vacation_days vd2
             WHERE vd2.employee_id = e.employee_id
               AND vd2.vacation_type_id = vt.vacation_type_id
               AND vd2.vacation_value > 0) AS usedVacationDays,
            (vd.vacation_value - (SELECT NVL(SUM(vd2.vacation_value), 0)
                                  FROM vacation_days vd2
                                  WHERE vd2.employee_id = e.employee_id
                                    AND vd2.vacation_type_id = vt.vacation_type_id
                                    AND vd2.vacation_value > 0)) AS remainingVacationDays
        FROM 
            vacation_days vd
        JOIN 
            vacation_type vt ON vd.vacation_type_id = vt.vacation_type_id
        JOIN 
            employee e ON vd.employee_id = e.employee_id
        JOIN 
            department d ON e.department_id = d.department_id
        JOIN 
            position p ON e.position_id = p.position_id
        ORDER BY 
            e.employment_type, e.employee_id, vt.vacation_type_name
    </select>


    <select id="getAllVacationDays" resultType="org.spring.domain.vacation.model.VacationDaysEntity">
        SELECT * FROM vacation_days
    </select>

    <select id="getAllVacationTypes" resultType="org.spring.domain.vacation.model.VacationTypeEntity">
        SELECT * FROM vacation_type
    </select>

    <select id="getAllStatuses" resultType="String">
        SELECT DISTINCT status FROM employee
    </select>

    <select id="getAllEmploymentTypes" resultType="String">
        SELECT DISTINCT employment_type FROM employee
    </select>

    <select id="getAllDepartments" resultType="org.spring.domain.employee.model.DepartmentEntity">
        SELECT * FROM department
    </select>

    <select id="getAllPositions" resultType="org.spring.domain.employee.model.PositionEntity">
        SELECT * FROM position
    </select>
   
 <select id="getFilteredVacationDetails" resultType="org.spring.domain.vacation.model.VacationDetailsEntity">
        <![CDATA[
        SELECT * FROM (
            SELECT 
                e.employment_type AS employmentType,
                e.employee_id AS employeeId,
                e.korean_name AS koreanName,
                d.department_name AS departmentName,
                p.position_name AS positionName,
                vt.vacation_type_name AS vacationTypeName,
                vd.vacation_value AS totalVacationDays,
                (SELECT NVL(SUM(vd2.vacation_value), 0)
                 FROM vacation_days vd2
                 WHERE vd2.employee_id = e.employee_id
                   AND vd2.vacation_type_id = vt.vacation_type_id
                   AND vd2.vacation_value > 0) AS usedVacationDays,
                (vd.vacation_value - (SELECT NVL(SUM(vd2.vacation_value), 0)
                                      FROM vacation_days vd2
                                      WHERE vd2.employee_id = e.employee_id
                                        AND vd2.vacation_type_id = vt.vacation_type_id
                                        AND vd2.vacation_value > 0)) AS remainingVacationDays,
                ROW_NUMBER() OVER (ORDER BY e.employment_type, e.employee_id, vt.vacation_type_name) AS rnum
            FROM 
                vacation_days vd
            JOIN 
                vacation_type vt ON vd.vacation_type_id = vt.vacation_type_id
            JOIN 
                employee e ON vd.employee_id = e.employee_id
            JOIN 
                department d ON e.department_id = d.department_id
            JOIN 
                position p ON e.position_id = p.position_id
            WHERE 
                (#{status, jdbcType=VARCHAR} IS NULL OR e.status = #{status, jdbcType=VARCHAR})
                AND (#{employmentType, jdbcType=VARCHAR} IS NULL OR e.employment_type = #{employmentType, jdbcType=VARCHAR})
                AND (#{departmentId, jdbcType=NUMERIC} IS NULL OR e.department_id = #{departmentId, jdbcType=NUMERIC})
                AND (#{positionId, jdbcType=NUMERIC} IS NULL OR e.position_id = #{positionId, jdbcType=NUMERIC})
                AND (#{vacationTypeName, jdbcType=VARCHAR} IS NULL OR vt.vacation_type_name = #{vacationTypeName, jdbcType=VARCHAR})
                AND (#{searchKeyword, jdbcType=VARCHAR} IS NULL OR 
                     e.employee_id LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%' OR 
                     e.korean_name LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%' OR 
                     d.department_name LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%' OR 
                     p.position_name LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%')
        ) WHERE rnum BETWEEN #{offset} + 1 AND #{offset} + #{limit}
        ]]>
    </select>

    <select id="countFilteredVacationDetails" resultType="int">
        SELECT COUNT(*)
        FROM 
            vacation_days vd
        JOIN 
            vacation_type vt ON vd.vacation_type_id = vt.vacation_type_id
        JOIN 
            employee e ON vd.employee_id = e.employee_id
        JOIN 
            department d ON e.department_id = d.department_id
        JOIN 
            position p ON e.position_id = p.position_id
        WHERE 
            (#{status, jdbcType=VARCHAR} IS NULL OR e.status = #{status, jdbcType=VARCHAR})
            AND (#{employmentType, jdbcType=VARCHAR} IS NULL OR e.employment_type = #{employmentType, jdbcType=VARCHAR})
            AND (#{departmentId, jdbcType=NUMERIC} IS NULL OR e.department_id = #{departmentId, jdbcType=NUMERIC})
            AND (#{positionId, jdbcType=NUMERIC} IS NULL OR e.position_id = #{positionId, jdbcType=NUMERIC})
            AND (#{vacationTypeName, jdbcType=VARCHAR} IS NULL OR vt.vacation_type_name = #{vacationTypeName, jdbcType=VARCHAR})
            AND (#{searchKeyword, jdbcType=VARCHAR} IS NULL OR 
                 e.employee_id LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%' OR 
                 e.korean_name LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%' OR 
                 d.department_name LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%' OR 
                 p.position_name LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%')
    </select>

    <select id="getVacationDetailsByEmployeeId" resultType="org.spring.domain.vacation.model.VacationDetailsEntity">
        SELECT 
            e.employment_type AS employmentType,
            e.employee_id AS employeeId,
            e.korean_name AS koreanName,
            d.department_name AS departmentName,
            p.position_name AS positionName,
            vt.vacation_type_name AS vacationTypeName,
            vd.vacation_value AS totalVacationDays,
            (SELECT NVL(SUM(vd2.vacation_value), 0)
             FROM vacation_days vd2
             WHERE vd2.employee_id = e.employee_id
               AND vd2.vacation_type_id = vt.vacation_type_id
               AND vd2.vacation_value > 0) AS usedVacationDays,
            (vd.vacation_value - (SELECT NVL(SUM(vd2.vacation_value), 0)
                                  FROM vacation_days vd2
                                  WHERE vd2.employee_id = e.employee_id
                                    AND vd2.vacation_type_id = vt.vacation_type_id
                                    AND vd2.vacation_value > 0)) AS remainingVacationDays
        FROM 
            vacation_days vd
        JOIN 
            vacation_type vt ON vd.vacation_type_id = vt.vacation_type_id
        JOIN 
            employee e ON vd.employee_id = e.employee_id
        JOIN 
            department d ON e.department_id = d.department_id
        JOIN 
            position p ON e.position_id = p.position_id
        WHERE 
            e.employee_id = #{employeeId}
        ORDER BY 
            vt.vacation_type_name
    </select>

</mapper>